from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext
import sqlite3
import requests
import json
import logging
import os
from cryptography.fernet import Fernet

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Setup the SQLite database connection
conn = sqlite3.connect('wallets.db')
c = conn.cursor()

# Initialize Updater with secure API key handling
BOT_API_KEY = os.getenv("BOT_API_KEY")
if not BOT_API_KEY:
    raise ValueError("BOT_API_KEY environment variable is not set")
updater = Updater(BOT_API_KEY, use_context=True)

# Encryption setup
ENCRYPTION_KEY = os.getenv("ENCRYPTION_KEY")
if not ENCRYPTION_KEY:
    raise ValueError("ENCRYPTION_KEY environment variable is not set")
cipher = Fernet(ENCRYPTION_KEY.encode())

# --- General Function "Homepage" Buttons ---
async def homepage_command(update: Update, context: CallbackContext):
    logging.info("User accessed homepage menu.")
    keyboard = [
        [InlineKeyboardButton("Bundler", callback_data="bundler")],
        [InlineKeyboardButton("Multi Snipe", callback_data="multi_snipe")],
        [InlineKeyboardButton("Check Wallet Balances", callback_data="check_balances")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Select an option:", reply_markup=reply_markup)

async def confirm_action(update: Update, context: CallbackContext):
    query = update.callback_query
    action = query.data.split('_')[1]
    logging.info(f"User confirmed action: {action}")
    
    if action == "dump":
        await query.message.reply_text("Dumping all tokens...")
        logging.info("Executing dump all tokens logic.")
    elif action == "sell":
        await query.message.reply_text("Selling tokens...")
        logging.info("Executing sell tokens logic.")
    elif action == "create_token":
        user_data = context.user_data
        response = requests.post("https://pump.fun/api/create_token", json=user_data)
        
        if response.status_code == 200:
            await query.message.reply_text("Token successfully created!")
            logging.info("Token creation successful.")
        else:
            await query.message.reply_text("Failed to create token. Please try again.")
            logging.error("Token creation failed.")
        user_data.clear()
    
    await query.answer()

def generate_confirmation_buttons(action):
    keyboard = [
        [InlineKeyboardButton("Yes", callback_data=f"confirm_{action}"), InlineKeyboardButton("No", callback_data="cancel")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def bundler_command(update: Update, context: CallbackContext):
    logging.info("User accessed bundler menu.")
    keyboard = [
        [InlineKeyboardButton("Generate Wallets", callback_data="generate_wallets")],
        [InlineKeyboardButton("Fund Wallets", callback_data="fund_wallets")],
        [InlineKeyboardButton("Create Token", callback_data="create_token")],
        [InlineKeyboardButton("Dump All", callback_data="confirm_dump")],
        [InlineKeyboardButton("Sell", callback_data="confirm_sell")],
        [InlineKeyboardButton("Retrieve P-Keys", callback_data="retrieve_p_keys")],
        [InlineKeyboardButton("Check Balances", callback_data="check_balances")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Bundler Menu:", reply_markup=reply_markup)

async def multi_snipe_command(update: Update, context: CallbackContext):
    logging.info("User accessed multi snipe menu.")
    keyboard = [
        [InlineKeyboardButton("Generate Wallets", callback_data="generate_wallets")],
        [InlineKeyboardButton("Fund Wallets", callback_data="fund_wallets")],
        [InlineKeyboardButton("Paste Token Address", callback_data="paste_token_address")],
        [InlineKeyboardButton("Buy", callback_data="buy")],
        [InlineKeyboardButton("Sell", callback_data="confirm_sell")],
        [InlineKeyboardButton("Dump All", callback_data="confirm_dump")],
        [InlineKeyboardButton("Retrieve P-Keys", callback_data="retrieve_p_keys")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Multi-Snipe Menu:", reply_markup=reply_markup)

async def create_token_command(update: Update, context: CallbackContext):
    logging.info("User started token creation process.")
    await update.message.reply_text("Enter token name:")
    context.user_data["awaiting_token_name"] = True

async def process_token_details(update: Update, context: CallbackContext):
    user_input = update.message.text
    user_data = context.user_data
    logging.info(f"User provided input: {user_input}")
    
    if "awaiting_token_name" in user_data:
        user_data["token_name"] = user_input
        del user_data["awaiting_token_name"]
        await update.message.reply_text("Enter token symbol:")
        user_data["awaiting_token_symbol"] = True
    elif "awaiting_token_symbol" in user_data:
        user_data["token_symbol"] = user_input
        del user_data["awaiting_token_symbol"]
        await update.message.reply_text("Enter supply:")
        user_data["awaiting_supply"] = True
    elif "awaiting_supply" in user_data:
        user_data["supply"] = user_input
        del user_data["awaiting_supply"]
        await update.message.reply_text("Enter decimals:")
        user_data["awaiting_decimals"] = True
    elif "awaiting_decimals" in user_data:
        user_data["decimals"] = user_input
        del user_data["awaiting_decimals"]
        await update.message.reply_text("Enter website (or type 'none'):")
        user_data["awaiting_website"] = True
    elif "awaiting_website" in user_data:
        user_data["website"] = user_input
        del user_data["awaiting_website"]
        await update.message.reply_text("Enter Telegram (or type 'none'):")
        user_data["awaiting_telegram"] = True
    elif "awaiting_telegram" in user_data:
        user_data["telegram"] = user_input
        del user_data["awaiting_telegram"]
        await update.message.reply_text("Enter Twitter (or type 'none'):")
        user_data["awaiting_twitter"] = True
    elif "awaiting_twitter" in user_data:
        user_data["twitter"] = user_input
        del user_data["awaiting_twitter"]
        logging.info("Token creation details collected. Awaiting confirmation.")
        await update.message.reply_text("Confirm token creation:", reply_markup=generate_confirmation_buttons("create_token"))
